import { CommandParameterFlag, CommandSignatureFlag, HighlightType } from '../constants';
import type { CommandDefinition, CommandParameter, CommandSignature } from '../types';

// #region keywords
const onOffKeywords: string[] = [ 'on', 'off', '0', '1' ] as const;
const windowTitleKeywords: string[] = [ 'ahk_class', 'ahk_id', 'ahk_pid', 'ahk_exe', 'ahk_group' ] as const;
// #region keywords

// #region common parameter(s)
export const windowParametersDefinitions: CommandParameter[] = [
  { type: HighlightType.UnquotedString, flags: CommandParameterFlag.None, values: windowTitleKeywords },
  { type: HighlightType.UnquotedString, flags: CommandParameterFlag.None, values: [] },
  { type: HighlightType.UnquotedString, flags: CommandParameterFlag.None, values: windowTitleKeywords },
  { type: HighlightType.UnquotedString, flags: CommandParameterFlag.None, values: [] },
] as const;
// #endregion common parameter(s)

// #region commands
export const commandDefinitions: CommandDefinition[] = [
  // https://www.autohotkey.com/docs/v1/lib/AutoTrim.htm
  { name: 'AutoTrim', signatures: [ { flags: CommandSignatureFlag.None, parameters: [ { type: HighlightType.Enum, flags: CommandParameterFlag.None, values: onOffKeywords } ] } ] },

  // https://www.autohotkey.com/docs/v1/lib/BlockInput.htm
  { name: 'BlockInput', signatures: [ { flags: CommandSignatureFlag.None, parameters: [ { type: HighlightType.Enum, flags: CommandParameterFlag.None, values: [ ...onOffKeywords, 'Send', 'Mouse', 'SendAndMouse', 'Default' ] } ] } ] },

  // https://www.autohotkey.com/docs/v1/lib/Click.htm
  { name: 'Click', signatures: [ { flags: CommandSignatureFlag.None, parameters: [ { type: HighlightType.UnquotedString, flags: CommandParameterFlag.None, values: [ 'Left', 'L', 'Right', 'R', 'Middle', 'M', 'X1', 'X2', 'Up', 'U', 'Down', 'D' ] } ] } ] },

  // https://www.autohotkey.com/docs/v1/lib/ClipWait.htm
  { name: 'ClipWait', signatures: [ { flags: CommandSignatureFlag.None, parameters: [ { type: HighlightType.Expression, flags: CommandParameterFlag.None, values: [] } ] } ] },

  // https://www.autohotkey.com/docs/v1/lib/Control.htm
  {
    name: 'Control',
    signatures: [
      signature([ subcommand('Check'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('UnCheck'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('Enable'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('Disable'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('Show'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('Hide'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('Style'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('ExStyle'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('ShowDropDown'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('HideDropDown'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('TabLeft'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('TabRight'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('Add'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('Delete'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('Choose'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('ChooseString'), blank(), ...windowParametersDefinitions ]),
      signature([ subcommand('EditPaste'), blank(), ...windowParametersDefinitions ]),
    ],
  },
  // TODO: Done here so far
  // { name: 'ControlClick', signatures: [ signature([]) ] },
  // { name: 'ControlFocus', signatures: [ signature([]) ] },
  // { name: 'ControlGet', signatures: [ signature([]) ] },
  // { name: 'ControlGetFocus', signatures: [ signature([]) ] },
  // { name: 'ControlGetPos', signatures: [ signature([]) ] },
  // { name: 'ControlGetText', signatures: [ signature([]) ] },
  // { name: 'ControlMove', signatures: [ signature([]) ] },
  // { name: 'ControlSend', signatures: [ signature([]) ] },
  // { name: 'ControlSendRaw', signatures: [ signature([]) ] },
  // { name: 'ControlSetText', signatures: [ signature([]) ] },
  // { name: 'CoordMode', signatures: [ signature([]) ] },
  // { name: 'Critical', signatures: [ signature([]) ] },
  // { name: 'DetectHiddenText', signatures: [ signature([]) ] },
  // { name: 'DetectHiddenWindows', signatures: [ signature([]) ] },
  // { name: 'Drive', signatures: [ signature([]) ] },
  // { name: 'DriveGet', signatures: [ signature([]) ] },
  // { name: 'DriveSpaceFree', signatures: [ signature([]) ] },
  // { name: 'Edit', signatures: [ signature([]) ] },
  // { name: 'EnvAdd', signatures: [ signature([]) ] },
  // { name: 'EnvAdd', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'EnvDiv', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'EnvGet', signatures: [ signature([]) ] },
  // { name: 'EnvMult', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'EnvSet', signatures: [ signature([]) ] },
  // { name: 'EnvSub', signatures: [ signature([]) ] },
  // { name: 'EnvUpdate', signatures: [ signature([]) ] },
  // { name: 'FileAppend', signatures: [ signature([]) ] },
  // { name: 'FileCopy', signatures: [ signature([]) ] },
  // { name: 'FileCopyDir', signatures: [ signature([]) ] },
  // { name: 'FileCreateDir', signatures: [ signature([]) ] },
  // { name: 'FileCreateShortcut', signatures: [ signature([]) ] },
  // { name: 'FileDelete', signatures: [ signature([]) ] },
  // { name: 'FileEncoding', signatures: [ signature([]) ] },
  // { name: 'FileInstall', signatures: [ signature([]) ] },
  // { name: 'FileGetAttrib', signatures: [ signature([]) ] },
  // { name: 'FileGetShortcut', signatures: [ signature([]) ] },
  // { name: 'FileGetSize', signatures: [ signature([]) ] },
  // { name: 'FileGetTime', signatures: [ signature([]) ] },
  // { name: 'FileGetVersion', signatures: [ signature([]) ] },
  // { name: 'FileMove', signatures: [ signature([]) ] },
  // { name: 'FileMoveDir', signatures: [ signature([]) ] },
  // { name: 'FileRead', signatures: [ signature([]) ] },
  // { name: 'FileReadLine', signatures: [ signature([]) ] },
  // { name: 'FileRecycle', signatures: [ signature([]) ] },
  // { name: 'FileRecycleEmpty', signatures: [ signature([]) ] },
  // { name: 'FileRemoveDir', signatures: [ signature([]) ] },
  // { name: 'FileSelectFile', signatures: [ signature([]) ] },
  // { name: 'FileSelectFolder', signatures: [ signature([]) ] },
  // { name: 'FileSetAttrib', signatures: [ signature([]) ] },
  // { name: 'FileSetTime', signatures: [ signature([]) ] },
  // { name: 'FormatTime', signatures: [ signature([]) ] },
  // { name: 'GetKeyState', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'Gosub', signatures: [ signature([]) ] },
  // { name: 'Goto', signatures: [ signature([]) ] },
  // { name: 'GroupActivate', signatures: [ signature([]) ] },
  // { name: 'GroupAdd', signatures: [ signature([]) ] },
  // { name: 'GroupClose', signatures: [ signature([]) ] },
  // { name: 'GroupDeactivate', signatures: [ signature([]) ] },
  // { name: 'Gui', signatures: [ signature([]) ] },
  // { name: 'GuiControl', signatures: [ signature([]) ] },
  // { name: 'GuiControlGet', signatures: [ signature([]) ] },
  // { name: 'Hotkey', signatures: [ signature([]) ] },
  // { name: 'ImageSearch', signatures: [ signature([]) ] },
  // { name: 'IniDelete', signatures: [ signature([]) ] },
  // { name: 'IniRead', signatures: [ signature([]) ] },
  // { name: 'IniWrite', signatures: [ signature([]) ] },
  // { name: 'Input', signatures: [ signature([]) ] },
  // { name: 'InputBox', signatures: [ signature([]) ] },
  // { name: 'KeyHistory', signatures: [ signature([]) ] },
  // { name: 'KeyWait', signatures: [ signature([]) ] },
  // { name: 'ListHotkeys', signatures: [ signature([]) ] },
  // { name: 'ListLines', signatures: [ signature([]) ] },
  // { name: 'ListVars', signatures: [ signature([]) ] },
  // { name: 'Menu', signatures: [ signature([]) ] },
  // { name: 'MouseClick', signatures: [ signature([]) ] },
  // { name: 'MouseClickDrag', signatures: [ signature([]) ] },
  // { name: 'MouseGetPos', signatures: [ signature([]) ] },
  // { name: 'MouseMove', signatures: [ signature([]) ] },
  // { name: 'MsgBox', signatures: [ signature([]) ] },
  // { name: 'OnExit', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'OutputDebug', signatures: [ signature([]) ] },
  // { name: 'PixelGetColor', signatures: [ signature([]) ] },
  // { name: 'PixelSearch', signatures: [ signature([]) ] },
  // { name: 'PostMessage', signatures: [ signature([]) ] },
  // { name: 'Process', signatures: [ signature([]) ] },
  // { name: 'Progress', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'Random', signatures: [ signature([]) ] },
  // { name: 'RegDelete', signatures: [ signature([]) ] },
  // { name: 'RegRead', signatures: [ signature([]) ] },
  // { name: 'RegWrite', signatures: [ signature([]) ] },
  // { name: 'Reload', signatures: [ signature([]) ] },
  // { name: 'Run', signatures: [ signature([]) ] },
  // { name: 'RunAs', signatures: [ signature([]) ] },
  // { name: 'RunWait', signatures: [ signature([]) ] },
  // { name: 'Send', signatures: [ signature([]) ] },
  // { name: 'SendRaw', signatures: [ signature([]) ] },
  // { name: 'SendInput', signatures: [ signature([]) ] },
  // { name: 'SendPlay', signatures: [ signature([]) ] },
  // { name: 'SendEvent', signatures: [ signature([]) ] },
  // { name: 'SendLevel', signatures: [ signature([]) ] },
  // { name: 'SendMessage', signatures: [ signature([]) ] },
  // { name: 'SendMode', signatures: [ signature([]) ] },
  // { name: 'SetBatchLines', signatures: [ signature([]) ] },
  // { name: 'SetCapsLockState', signatures: [ signature([]) ] },
  // { name: 'SetControlDelay', signatures: [ signature([]) ] },
  // { name: 'SetDefaultMouseSpeed', signatures: [ signature([]) ] },
  // { name: 'SetEnv', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'SetFormat', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'SetKeyDelay', signatures: [ signature([]) ] },
  // { name: 'SetMouseDelay', signatures: [ signature([]) ] },
  // { name: 'SetNumLockState', signatures: [ signature([]) ] },
  // { name: 'SetScrollLockState', signatures: [ signature([]) ] },
  // { name: 'SetRegView', signatures: [ signature([]) ] },
  // { name: 'SetStoreCapsLockMode', signatures: [ signature([]) ] },
  // { name: 'SetTimer', signatures: [ signature([]) ] },
  // { name: 'SetTitleMatchMode', signatures: [ signature([]) ] },
  // { name: 'SetWinDelay', signatures: [ signature([]) ] },
  // { name: 'SetWorkingDir', signatures: [ signature([]) ] },
  // { name: 'Sleep', signatures: [ signature([]) ] },
  // { name: 'Sort', signatures: [ signature([]) ] },
  // { name: 'SoundBeep', signatures: [ signature([]) ] },
  // { name: 'SoundGet', signatures: [ signature([]) ] },
  // { name: 'SoundGetWaveVolume', signatures: [ signature([]) ] },
  // { name: 'SoundPlay', signatures: [ signature([]) ] },
  // { name: 'SoundSet', signatures: [ signature([]) ] },
  // { name: 'SoundSetWaveVolume', signatures: [ signature([]) ] },
  // { name: 'SplashImage', signatures: [ signature([]) ] },
  // { name: 'SplashTextOn', signatures: [ signature([]) ] },
  // { name: 'SplashTextOff', signatures: [ signature([]) ] },
  // { name: 'SplitPath', signatures: [ signature([]) ] },
  // { name: 'StatusBarGetText', signatures: [ signature([]) ] },
  // { name: 'StatusBarWait', signatures: [ signature([]) ] },
  // { name: 'StringCaseSense', signatures: [ signature([]) ] },
  // { name: 'StringGetPos', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'StringLeft', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'StringLen', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'StringLower', signatures: [ signature([]) ] },
  // { name: 'StringMid', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'StringReplace', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'StringRight', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'StringSplit', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'StringTrimLeft', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'StringTrimRight', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'StringUpper', signatures: [ signature([]) ] },
  // { name: 'SysGet', signatures: [ signature([]) ] },
  // { name: 'Thread', signatures: [ signature([]) ] },
  // { name: 'ToolTip', signatures: [ signature([]) ] },
  // { name: 'Transform', signatures: [ signature([], CommandSignatureFlag.Deprecated) ] },
  // { name: 'TrayTip', signatures: [ signature([]) ] },
  // { name: 'UrlDownloadToFile', signatures: [ signature([]) ] },
  // { name: 'WinActivate', signatures: [ signature([]) ] },
  // { name: 'WinActivateBottom', signatures: [ signature([]) ] },
  // { name: 'WinClose', signatures: [ signature([]) ] },
  // { name: 'WinGetActiveStats', signatures: [ signature([]) ] },
  // { name: 'WinGetActiveTitle', signatures: [ signature([]) ] },
  // { name: 'WinGetClass', signatures: [ signature([]) ] },
  // { name: 'WinGet', signatures: [ signature([]) ] },
  // { name: 'WinGetPos', signatures: [ signature([]) ] },
  // { name: 'WinGetText', signatures: [ signature([]) ] },
  // { name: 'WinGetTitle', signatures: [ signature([]) ] },
  // { name: 'WinHide', signatures: [ signature([]) ] },
  // { name: 'WinKill', signatures: [ signature([]) ] },
  // { name: 'WinMaximize', signatures: [ signature([]) ] },
  // { name: 'WinMenuSelectItem', signatures: [ signature([]) ] },
  // { name: 'WinMinimize', signatures: [ signature([]) ] },
  // { name: 'WinMinimizeAll', signatures: [ signature([]) ] },
  // { name: 'WinMinimizeAllUndo', signatures: [ signature([]) ] },
  // { name: 'WinMove', signatures: [ signature([]) ] },
  // { name: 'WinRestore', signatures: [ signature([]) ] },
  // { name: 'WinSet', signatures: [ signature([]) ] },
  // { name: 'WinSetTitle', signatures: [ signature([]) ] },
  // { name: 'WinShow', signatures: [ signature([]) ] },
  // { name: 'WinWait', signatures: [ signature([]) ] },
  // { name: 'WinWaitActive', signatures: [ signature([]) ] },
  // { name: 'WinWaitNotActive', signatures: [ signature([]) ] },
  // { name: 'WinWaitClose', signatures: [ signature([]) ] },
] as const;
// #endregion commands

// #region helpers
function signature(parameters: CommandParameter[], flags: CommandSignatureFlag = CommandSignatureFlag.None): CommandSignature {
  return { flags, parameters };
}
function subcommand(subcommand: string, flags: CommandParameterFlag = CommandParameterFlag.None): CommandParameter {
  return { type: HighlightType.SubCommand, flags, values: [ subcommand ] };
}
function blank(flags: CommandParameterFlag = CommandParameterFlag.None): CommandParameter {
  return { type: HighlightType.Blank, flags };
}
// #endregion helpers
